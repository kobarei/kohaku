// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgtype"
)

const InsertErlangVMMemoryStats = `-- name: InsertErlangVMMemoryStats :exec
INSERT INTO erlang_vm_memory_stats (
  time,
  sora_version, sora_label, sora_node_name,
  stats_type,
  type_total, type_processes, type_processes_used, type_system,
  type_atom, type_atom_used, type_binary, type_code, type_ets
) VALUES (
  $1,
  $2, $3, $4,
  $5,
  $6, $7, $8, $9,
  $10, $11, $12, $13, $14
)
`

type InsertErlangVMMemoryStatsParams struct {
	Time              time.Time      `json:"time"`
	SoraVersion       string         `json:"sora_version"`
	SoraLabel         string         `json:"sora_label"`
	SoraNodeName      string         `json:"sora_node_name"`
	StatsType         string         `json:"stats_type"`
	TypeTotal         pgtype.Numeric `json:"type_total"`
	TypeProcesses     pgtype.Numeric `json:"type_processes"`
	TypeProcessesUsed pgtype.Numeric `json:"type_processes_used"`
	TypeSystem        pgtype.Numeric `json:"type_system"`
	TypeAtom          pgtype.Numeric `json:"type_atom"`
	TypeAtomUsed      pgtype.Numeric `json:"type_atom_used"`
	TypeBinary        pgtype.Numeric `json:"type_binary"`
	TypeCode          pgtype.Numeric `json:"type_code"`
	TypeEts           pgtype.Numeric `json:"type_ets"`
}

func (q *Queries) InsertErlangVMMemoryStats(ctx context.Context, arg InsertErlangVMMemoryStatsParams) error {
	_, err := q.db.Exec(ctx, InsertErlangVMMemoryStats,
		arg.Time,
		arg.SoraVersion,
		arg.SoraLabel,
		arg.SoraNodeName,
		arg.StatsType,
		arg.TypeTotal,
		arg.TypeProcesses,
		arg.TypeProcessesUsed,
		arg.TypeSystem,
		arg.TypeAtom,
		arg.TypeAtomUsed,
		arg.TypeBinary,
		arg.TypeCode,
		arg.TypeEts,
	)
	return err
}

const InsertSoraConnection = `-- name: InsertSoraConnection :exec
INSERT INTO sora_connection (
  timestamp,
  label, version, node_name,
  multistream, simulcast, spotlight,
  role, channel_id, session_id, client_id, connection_id
)
SELECT
  $1,
  $2, $3, $4,
  $5, $6, $7,
  $8, $9, $10, $11, $12
WHERE
  NOT EXISTS (
    SELECT id
    FROM sora_connection
    WHERE (
      (channel_id = $9::varchar(255)) AND
      (session_id = $10::char(26)) AND
      (client_id = $11::varchar(255)) AND
      (connection_id = $12::char(26))
    )
)
`

type InsertSoraConnectionParams struct {
	Timestamp    time.Time `json:"timestamp"`
	Label        string    `json:"label"`
	Version      string    `json:"version"`
	NodeName     string    `json:"node_name"`
	Multistream  bool      `json:"multistream"`
	Simulcast    bool      `json:"simulcast"`
	Spotlight    bool      `json:"spotlight"`
	Role         string    `json:"role"`
	ChannelID    string    `json:"channel_id"`
	SessionID    string    `json:"session_id"`
	ClientID     string    `json:"client_id"`
	ConnectionID string    `json:"connection_id"`
}

func (q *Queries) InsertSoraConnection(ctx context.Context, arg InsertSoraConnectionParams) error {
	_, err := q.db.Exec(ctx, InsertSoraConnection,
		arg.Timestamp,
		arg.Label,
		arg.Version,
		arg.NodeName,
		arg.Multistream,
		arg.Simulcast,
		arg.Spotlight,
		arg.Role,
		arg.ChannelID,
		arg.SessionID,
		arg.ClientID,
		arg.ConnectionID,
	)
	return err
}

const InsertSoraNode = `-- name: InsertSoraNode :exec
INSERT INTO sora_node (
  timestamp,
  label, version, node_name
)
SELECT
  $1,
  $2, $3, $4
WHERE
  NOT EXISTS (
    SELECT id
    FROM sora_node
    WHERE (
      (label = $2::varchar(255)) AND
      (version = $3::varchar(255)) AND
      (node_name = $4::varchar(255))
    )
)
`

type InsertSoraNodeParams struct {
	Timestamp time.Time `json:"timestamp"`
	Label     string    `json:"label"`
	Version   string    `json:"version"`
	NodeName  string    `json:"node_name"`
}

func (q *Queries) InsertSoraNode(ctx context.Context, arg InsertSoraNodeParams) error {
	_, err := q.db.Exec(ctx, InsertSoraNode,
		arg.Timestamp,
		arg.Label,
		arg.Version,
		arg.NodeName,
	)
	return err
}
