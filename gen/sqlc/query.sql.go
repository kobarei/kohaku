// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: query.sql

package db

import (
	"context"
	"time"
)

const InsertSoraConnection = `-- name: InsertSoraConnection :exec
INSERT INTO sora_connection (
  timestamp,
  label, version, node_name,
  multistream, simulcast, spotlight,
  role, channel_id, session_id, client_id, connection_id
)
SELECT
  $1,
  $2, $3, $4,
  $5, $6, $7,
  $8, $9, $10, $11, $12
WHERE
  NOT EXISTS (
    SELECT id
    FROM sora_connection
    WHERE (
      (channel_id = $9::varchar(255)) AND
      (session_id = $10::char(26)) AND
      (client_id = $11::varchar(255)) AND
      (connection_id = $12::char(26))
    )
)
`

type InsertSoraConnectionParams struct {
	Timestamp    time.Time `json:"timestamp"`
	Label        string    `json:"label"`
	Version      string    `json:"version"`
	NodeName     string    `json:"node_name"`
	Multistream  bool      `json:"multistream"`
	Simulcast    bool      `json:"simulcast"`
	Spotlight    bool      `json:"spotlight"`
	Role         string    `json:"role"`
	ChannelID    string    `json:"channel_id"`
	SessionID    string    `json:"session_id"`
	ClientID     string    `json:"client_id"`
	ConnectionID string    `json:"connection_id"`
}

func (q *Queries) InsertSoraConnection(ctx context.Context, arg InsertSoraConnectionParams) error {
	_, err := q.db.Exec(ctx, InsertSoraConnection,
		arg.Timestamp,
		arg.Label,
		arg.Version,
		arg.NodeName,
		arg.Multistream,
		arg.Simulcast,
		arg.Spotlight,
		arg.Role,
		arg.ChannelID,
		arg.SessionID,
		arg.ClientID,
		arg.ConnectionID,
	)
	return err
}
